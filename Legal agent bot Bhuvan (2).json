{
  "name": "Legal agent bot Bhuvan",
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a friendly multilingual legal assistant and generator of legal documents.  \nFollow these rules strictly and always respond in JSON format as defined below.\n\n──────────────────────────────\n🎯 PURPOSE\n──────────────────────────────\nYou handle two types of user requests:\n1. **General legal queries** — you explain naturally, concisely, and accurately.\n2. **Legal document generation** — you collect missing details and output complete legal document text in pure HTML suitable for PDF/Word conversion.\n\n──────────────────────────────\n🗂️ INPUTS (from n8n)\n──────────────────────────────\n- Message text: {{ $json.message.text }}\n- Chat ID: {{ $json.message.chat.id }}\n- User-provided document details (name, type, case info)\n\n──────────────────────────────\n📤 OUTPUT FORMAT (MUST FOLLOW EXACTLY)\n──────────────────────────────\nReturn your response as valid JSON:\n\n{\n  \"message\": \"{{ $json.message.text }}\",\n  \"chat_id\": \"{{ $json.message.chat.id }}\",\n  \"reply\": \"<AI reply text or HTML content here>\",\n  \"flag\": 1 or 2\n}\n\nRules for flags:\n- `flag = 1` → When `reply` contains **pure HTML** (legal document content only).\n- `flag = 2` → When `reply` contains **normal text reply** (explanation, clarification, or data collection).\n\n──────────────────────────────\n📘 RESPONSE RULES\n──────────────────────────────\n1. **General Queries (flag = 2)**\n   - Reply naturally, concisely, and clearly in ≤ 4000 characters.\n   - Detect user language automatically and respond in that language.\n   - End every message with:\n     \"Would you like to request another document or ask another legal query?\"\n\n2. **Document Requests (flag = 1)**\n   - If required information is missing, ask politely for the following:\n     • Full Name  \n     • Type of document (e.g., Affidavit, Lease Agreement, NDA, Legal Notice, etc.)  \n     • Relevant case information (dates, location, parties involved, purpose, etc.)  \n     • Language preference (if not detected)\n   - Once all details are provided, generate **pure HTML content only** — ready for PDF/Word export.\n   - The HTML must include all legal formatting (titles, paragraphs, signature lines, etc.).\n   - Do NOT include greetings, explanations, or any text outside HTML.\n   - Example document structure:\n     ```html\n     <!doctype html>\n     <html>\n     <head><meta charset=\"utf-8\"><title>Document Title</title></head>\n     <body>\n       <h1 style=\"text-align:center;\">DOCUMENT TITLE</h1>\n       <p>Content...</p>\n       <p>Signature: _____________________</p>\n     </body>\n     </html>\n     ```\n   - Replace placeholders dynamically using the user’s provided data.\n\n3. **Multilingual Support**\n   - Detect and respond in the user’s language automatically (e.g., English, Hindi, Arabic, Tamil, etc.).\n   - If any legal term has no direct translation, show both local language and English in brackets.\n\n4. **Attachments / File Requests**\n   - If the user uploads a document (PDF/DOCX), ask whether they want:\n     - “Edit / Modify”\n     - “Translate”\n     - “Convert to PDF/Word”\n   - If conversion is requested → Return only pure HTML (flag = 1).\n\n5. **Constraints**\n   - Replies must never exceed 4000 characters.\n   - Never produce raw code or file attachments.\n   - Never include AI commentary in HTML.\n   - Always ensure final JSON is properly structured.\n   - Always output HTML cleanly formatted and legally styled.\n\n──────────────────────────────\n💡 EXAMPLES\n──────────────────────────────\n\n✅ Example 1: Normal legal query  \n**User:** What is the process for registering a lease agreement in India?  \n**Output:**\n```json\n{\n  \"message\": \"What is the process for registering a lease agreement in India?\",\n  \"chat_id\": \"{{ $json.message.chat.id }}\",\n  \"reply\": \"In India, a lease agreement exceeding 11 months must be registered under the Registration Act, 1908... Would you like to request another document or ask another legal query?\",\n  \"flag\": 2\n}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        304,
        -256
      ],
      "id": "cc85a4db-0cc3-4f7e-b1d4-d5ac790a5094",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        176,
        -32
      ],
      "id": "f1b635c2-212c-470d-84b8-81806fd6d29d",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "YxhbXtO7Ic0R4Vay",
          "name": "Google Gemini(PaLM) Api account 3"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"message\":\"<message>\",\n  \"chat_id\":\"<chat id>\",\n  \"reply\":\"<reply>\",\n  \"flag\":\"<flag>\"\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        560,
        -32
      ],
      "id": "f36b9924-9f5b-473e-b331-841c2851f9ea",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        640,
        176
      ],
      "id": "49c220d3-e0e9-450a-8103-c5b6272842b0",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "YxhbXtO7Ic0R4Vay",
          "name": "Google Gemini(PaLM) Api account 3"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.reply }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1376,
        -256
      ],
      "id": "06cdc8d0-dbad-4462-a1b7-a2efd3178470",
      "name": "Send a text message",
      "webhookId": "f08b99c0-4df4-47c5-9fad-687421092f4c",
      "credentials": {
        "telegramApi": {
          "id": "wzn4rGYUtc1x7Gt1",
          "name": "Bhuvan Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.message.chat.id }}",
        "tableName": "legal_memory"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        304,
        -32
      ],
      "id": "fb7baaba-6a05-4449-a6f2-7d86041fac13",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "rYu7NUfKWprmtU8y",
          "name": "Postgres account 3"
        }
      }
    },
    {
      "parameters": {
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "11y6rR-ThCvkElcmRO57qzf_-dZoVcQnz",
          "mode": "list",
          "cachedResultName": "Self_Declaration",
          "cachedResultUrl": "https://drive.google.com/drive/folders/11y6rR-ThCvkElcmRO57qzf_-dZoVcQnz"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTool",
      "typeVersion": 3,
      "position": [
        432,
        -32
      ],
      "id": "f0738775-484e-43c4-bd2b-b4e454ceacfb",
      "name": "Upload file in Google Drive",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "LynKNTlLpd1xzEJN",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.output.flag }}",
                    "rightValue": "2",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "cb4f9173-71fc-4ebe-bf5a-73e4be845a3a"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b19425b9-479d-4aca-bfa7-37ae14b86c5e",
                    "leftValue": "={{ $json.output.flag }}",
                    "rightValue": "1",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        928,
        -160
      ],
      "id": "d0edccf9-e938-4d79-96ba-aecc068f4beb",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// In a Function node:\nconst htmlContent = $input.first().json.output.reply; // your HTML string\nreturn [{\n  binary: {\n    index: {\n      data: Buffer.from(htmlContent).toString('base64'),\n      mimeType: 'text/html',\n      fileName: 'index.html',\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        -64
      ],
      "id": "6a5ed751-7a15-46ae-ada8-1bb775a532b7",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "jsCode": "let cleanedText =$input.first().json.output.reply|| \"\";\n\n// Escape special characters for Telegram\ncleanedText = cleanedText\n  .replace(/\\*/g, \"\\\\*\")\n  .replace(/_/g, \"\\\\_\")\n  .replace(/\\[/g, \"\\\\[\")\n  .replace(/\\]/g, \"\\\\]\")\n  .replace(/\\(/g, \"\\\\(\")\n  .replace(/\\)/g, \"\\\\)\");\n\nreturn [\n  {\n    json: {\n      chat_id: $input.first().json.output.chat_id,\n      reply: cleanedText\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        -256
      ],
      "id": "9bdedae4-56be-4d20-990e-742458f9b5f3",
      "name": "Code in JavaScript2"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://gotenberg:3000/forms/chromium/convert/html",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "files",
              "inputDataFieldName": "index"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "file",
              "outputPropertyName": "document.pdf"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1376,
        -64
      ],
      "id": "86715846-3279-4c04-87fa-8882962527d0",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -48,
        -256
      ],
      "id": "8e1dce42-2ee5-443e-8a58-95057f88fabf",
      "name": "Telegram Trigger1",
      "webhookId": "f9a4cfdb-ecb7-4e36-b8b5-151dc62e40d3",
      "credentials": {
        "telegramApi": {
          "id": "wzn4rGYUtc1x7Gt1",
          "name": "Bhuvan Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendDocument",
        "chatId": "={{ $('Switch').item.json.output.chat_id }}",
        "binaryData": true,
        "binaryPropertyName": "=document.pdf",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1600,
        -64
      ],
      "id": "adec4cc3-3a89-4bac-a245-a1468ef9c767",
      "name": "Send a document",
      "webhookId": "8fe1769c-78d5-4e1e-9668-8a95a64976eb",
      "credentials": {
        "telegramApi": {
          "id": "wzn4rGYUtc1x7Gt1",
          "name": "Bhuvan Telegram account 2"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "crm.lead",
        "fieldsToCreateOrUpdate": {
          "fields": [
            {
              "fieldName": "contact_name",
              "fieldValue": "={{ $json.username }}"
            },
            {
              "fieldName": "name",
              "fieldValue": "Telegram"
            },
            {
              "fieldName": "email_from",
              "fieldValue": "bhuvank@advantixagi.com"
            },
            {
              "fieldName": "description",
              "fieldValue": "={{ $json.query }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1600,
        -352
      ],
      "id": "d9213e11-332e-4340-9aba-563bc9b40164",
      "name": "Create an item",
      "credentials": {
        "odooApi": {
          "id": "SJjcbDSldV0XNAy1",
          "name": "Odoo account"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "crm.lead",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "contact_name"
          ]
        }
      },
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        928,
        -448
      ],
      "id": "0eac0e2a-1b2c-48b5-a107-b600f2ba7714",
      "name": "Get many items",
      "credentials": {
        "odooApi": {
          "id": "SJjcbDSldV0XNAy1",
          "name": "Odoo account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const odoo = $input.all().map(item => ({\n  id:item.json.id,\n  name: item.json.contact_name\n}));\nconst username = $('Telegram Trigger1').first().json.message.from.username;\nconst query = $('Telegram Trigger1').first().json.message.text\n\nlet flag = 0;\nlet ids = [];\nfor (const items of odoo){\n  if(items.name === username){\n    flag = 1;\n    ids.push(items.id);\n  }\n}\n\nreturn{\n  username:username,\n  flag:flag,\n  ids:ids,\n  query:query\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1152,
        -448
      ],
      "id": "b5249ad7-2a4a-4b50-b00c-1801409fbce2",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ddca848e-e641-40b3-ae74-fd04c537f163",
              "leftValue": "={{ $json.flag }}",
              "rightValue": 1,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1376,
        -448
      ],
      "id": "e741b8a6-41d3-42f2-ad37-652e2e7a2217",
      "name": "If"
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "crm.lead",
        "operation": "update",
        "customResourceId": "={{ $json.ids[0] }}",
        "fieldsToCreateOrUpdate": {
          "fields": [
            {
              "fieldName": "description",
              "fieldValue": "={{ $json.query }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1600,
        -544
      ],
      "id": "aae9fcee-b5f8-4eed-bc1b-a3f677b63886",
      "name": "Update an item",
      "credentials": {
        "odooApi": {
          "id": "SJjcbDSldV0XNAy1",
          "name": "Odoo account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get many items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Upload file in Google Drive": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code in JavaScript2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript2": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Send a document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a document": {
      "main": [
        []
      ]
    },
    "Create an item": {
      "main": [
        []
      ]
    },
    "Get many items": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Update an item",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create an item",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e4377785-1f0c-4c02-9c73-def84c6a0253",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5229ad676c3a8d293c6db345f673ae85f2faeec97332d940e6b8ecea4c050d50"
  },
  "id": "7bYZEAz9q8zcOhzN",
  "tags": []
}